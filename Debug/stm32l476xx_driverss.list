
stm32l476xx_driverss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001240  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080013c4  080013c4  000113c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013cc  080013cc  000113d4  2**0
                  CONTENTS
  4 .ARM          00000000  080013cc  080013cc  000113d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013cc  080013d4  000113d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013cc  080013cc  000113cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013d0  080013d0  000113d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000113d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000113d4  2**0
                  CONTENTS
 10 .bss          00000238  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000238  20000238  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000113d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00011404  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001a44  00000000  00000000  00011447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000522  00000000  00000000  00012e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001a8  00000000  00000000  000133b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000139  00000000  00000000  00013558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000216f  00000000  00000000  00013691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001d63  00000000  00000000  00015800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000091a6  00000000  00000000  00017563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000660  00000000  00000000  0002070c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00020d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080013ac 	.word	0x080013ac

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	080013ac 	.word	0x080013ac

080001c4 <strcmp>:
 80001c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001cc:	2a01      	cmp	r2, #1
 80001ce:	bf28      	it	cs
 80001d0:	429a      	cmpcs	r2, r3
 80001d2:	d0f7      	beq.n	80001c4 <strcmp>
 80001d4:	1ad0      	subs	r0, r2, r3
 80001d6:	4770      	bx	lr

080001d8 <main>:
int Receive_Stop = 0; //bandera que indica que hay un dato para leer
SPI_Handle_t SPI2Handle;
char read_byte;
char receive_data[MAX_LEN];
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0XFF;
 80001de:	23ff      	movs	r3, #255	; 0xff
 80001e0:	72fb      	strb	r3, [r7, #11]
	Clock_Init();
 80001e2:	f000 f87b 	bl	80002dc <Clock_Init>
	GPIOx_Init();
 80001e6:	f000 f895 	bl	8000314 <GPIOx_Init>

	GPIO_IRQInterruptConfig(EXTI0_IRQn,ENABLE); //señal de interrupcion
 80001ea:	2101      	movs	r1, #1
 80001ec:	2006      	movs	r0, #6
 80001ee:	f000 fc7d 	bl	8000aec <GPIO_IRQInterruptConfig>
	GPIO_IRQPriorityConfig(EXTI0_IRQn, NVIC_IRQ_PRI15); //prioridad de la interrupción
 80001f2:	210f      	movs	r1, #15
 80001f4:	2006      	movs	r0, #6
 80001f6:	f000 fcff 	bl	8000bf8 <GPIO_IRQPriorityConfig>

	SPI_IRQInterruptConfig(SPI2_GLOBAL_INTERRUPT,ENABLE);
 80001fa:	2101      	movs	r1, #1
 80001fc:	2024      	movs	r0, #36	; 0x24
 80001fe:	f000 fe5d 	bl	8000ebc <SPI_IRQInterruptConfig>
	SPI_IRQPriorityConfig(SPI2_GLOBAL_INTERRUPT, NVIC_IRQ_PRI15);
 8000202:	210f      	movs	r1, #15
 8000204:	2024      	movs	r0, #36	; 0x24
 8000206:	f000 fedf 	bl	8000fc8 <SPI_IRQPriorityConfig>

	SPI2_Inits();
 800020a:	f000 f927 	bl	800045c <SPI2_Inits>

	SPI_SSOEConfig(SPI2, ENABLE); /*The NSS pin is managed by the hardware. The NSS signal
 800020e:	2101      	movs	r1, #1
 8000210:	482b      	ldr	r0, [pc, #172]	; (80002c0 <main+0xe8>)
 8000212:	f000 fe1a 	bl	8000e4a <SPI_SSOEConfig>
										is driven low as soon as the SPI is enabled in master mode (SPE=1), and is kept
										low until the SPI is disabled (SPE =0).*/

	char expected_data[] = "ELIO"; // Datos esperados
 8000216:	4a2b      	ldr	r2, [pc, #172]	; (80002c4 <main+0xec>)
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800021e:	6018      	str	r0, [r3, #0]
 8000220:	3304      	adds	r3, #4
 8000222:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		Receive_Stop = 0;
 8000224:	4b28      	ldr	r3, [pc, #160]	; (80002c8 <main+0xf0>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]

		int result = strcmp(receive_data,expected_data);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4619      	mov	r1, r3
 800022e:	4827      	ldr	r0, [pc, #156]	; (80002cc <main+0xf4>)
 8000230:	f7ff ffc8 	bl	80001c4 <strcmp>
 8000234:	60f8      	str	r0, [r7, #12]
		if(result == 0)
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d107      	bne.n	800024c <main+0x74>
		{
			GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_5);
 800023c:	2105      	movs	r1, #5
 800023e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000242:	f000 fc3d 	bl	8000ac0 <GPIO_ToggleOutputPin>
			strcpy(receive_data," ");
 8000246:	4b21      	ldr	r3, [pc, #132]	; (80002cc <main+0xf4>)
 8000248:	2220      	movs	r2, #32
 800024a:	801a      	strh	r2, [r3, #0]
		}

		while(!Data_Available);
 800024c:	bf00      	nop
 800024e:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <main+0xf8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0fb      	beq.n	800024e <main+0x76>

		GPIO_IRQInterruptConfig(EXTI0_IRQn,DISABLE); //Deshabilitamos interrupcion externa mientras recivimos el dato
 8000256:	2100      	movs	r1, #0
 8000258:	2006      	movs	r0, #6
 800025a:	f000 fc47 	bl	8000aec <GPIO_IRQInterruptConfig>

		SPI_PeripheralClontrol(SPI2,ENABLE); /*Habilitando SPI*/
 800025e:	2101      	movs	r1, #1
 8000260:	4817      	ldr	r0, [pc, #92]	; (80002c0 <main+0xe8>)
 8000262:	f000 fe0e 	bl	8000e82 <SPI_PeripheralClontrol>

		while(!Receive_Stop)
 8000266:	e013      	b.n	8000290 <main+0xb8>
		{
			while( SPI_SendDataIT(&SPI2Handle, &dummy_write, 1) == SPI_BUSY_IN_TX);
 8000268:	bf00      	nop
 800026a:	f107 030b 	add.w	r3, r7, #11
 800026e:	2201      	movs	r2, #1
 8000270:	4619      	mov	r1, r3
 8000272:	4818      	ldr	r0, [pc, #96]	; (80002d4 <main+0xfc>)
 8000274:	f000 fed2 	bl	800101c <SPI_SendDataIT>
 8000278:	4603      	mov	r3, r0
 800027a:	2b02      	cmp	r3, #2
 800027c:	d0f5      	beq.n	800026a <main+0x92>
			while( SPI_ReceiveDataIT(&SPI2Handle, (uint8_t *)&read_byte, 1) == SPI_BUSY_IN_RX);
 800027e:	bf00      	nop
 8000280:	2201      	movs	r2, #1
 8000282:	4915      	ldr	r1, [pc, #84]	; (80002d8 <main+0x100>)
 8000284:	4813      	ldr	r0, [pc, #76]	; (80002d4 <main+0xfc>)
 8000286:	f000 feee 	bl	8001066 <SPI_ReceiveDataIT>
 800028a:	4603      	mov	r3, r0
 800028c:	2b01      	cmp	r3, #1
 800028e:	d0f7      	beq.n	8000280 <main+0xa8>
		while(!Receive_Stop)
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <main+0xf0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0e7      	beq.n	8000268 <main+0x90>

		}


		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000298:	bf00      	nop
 800029a:	2180      	movs	r1, #128	; 0x80
 800029c:	4808      	ldr	r0, [pc, #32]	; (80002c0 <main+0xe8>)
 800029e:	f000 fdc0 	bl	8000e22 <SPI_GetFlagStatus>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d1f8      	bne.n	800029a <main+0xc2>

		SPI_PeripheralClontrol(SPI2,DISABLE); /*Deshabilitando SPI*/
 80002a8:	2100      	movs	r1, #0
 80002aa:	4805      	ldr	r0, [pc, #20]	; (80002c0 <main+0xe8>)
 80002ac:	f000 fde9 	bl	8000e82 <SPI_PeripheralClontrol>

		Data_Available = 0;
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <main+0xf8>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]

		GPIO_IRQInterruptConfig(EXTI0_IRQn,ENABLE);
 80002b6:	2101      	movs	r1, #1
 80002b8:	2006      	movs	r0, #6
 80002ba:	f000 fc17 	bl	8000aec <GPIO_IRQInterruptConfig>
	{
 80002be:	e7b1      	b.n	8000224 <main+0x4c>
 80002c0:	40003800 	.word	0x40003800
 80002c4:	080013c4 	.word	0x080013c4
 80002c8:	20000020 	.word	0x20000020
 80002cc:	20000040 	.word	0x20000040
 80002d0:	2000001c 	.word	0x2000001c
 80002d4:	20000024 	.word	0x20000024
 80002d8:	2000003c 	.word	0x2000003c

080002dc <Clock_Init>:
	}
}

void Clock_Init(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	HSI_ON();
 80002e0:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <Clock_Init+0x34>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <Clock_Init+0x34>)
 80002e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ea:	6013      	str	r3, [r2, #0]
	SELECT_HSI_4MHZ();
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <Clock_Init+0x34>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a07      	ldr	r2, [pc, #28]	; (8000310 <Clock_Init+0x34>)
 80002f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80002f6:	6093      	str	r3, [r2, #8]
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <Clock_Init+0x34>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <Clock_Init+0x34>)
 80002fe:	f043 530c 	orr.w	r3, r3, #587202560	; 0x23000000
 8000302:	6093      	str	r3, [r2, #8]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <GPIOx_Init>:

void GPIOx_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b08a      	sub	sp, #40	; 0x28
 8000318:	af00      	add	r7, sp, #0

	GPIO_PeriClockControl(GPIOA, ENABLE);
 800031a:	2101      	movs	r1, #1
 800031c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000320:	f000 f920 	bl	8000564 <GPIO_PeriClockControl>
	GPIO_Handle_t GPIO_LED_struct;

	memset(&GPIO_LED_struct,0,sizeof(GPIO_LED_struct));
 8000324:	f107 031c 	add.w	r3, r7, #28
 8000328:	220c      	movs	r2, #12
 800032a:	2100      	movs	r1, #0
 800032c:	4618      	mov	r0, r3
 800032e:	f001 f810 	bl	8001352 <memset>
	GPIO_LED_struct.pGPIOx = GPIOA;
 8000332:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000336:	61fb      	str	r3, [r7, #28]
	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000338:	2301      	movs	r3, #1
 800033a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 800033e:	2305      	movs	r3, #5
 8000340:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000344:	2300      	movs	r3, #0
 8000346:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034a:	2300      	movs	r3, #0
 800034c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000350:	2300      	movs	r3, #0
 8000352:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	GPIO_Init(&GPIO_LED_struct); /*Initializing LED*/
 800035c:	f107 031c 	add.w	r3, r7, #28
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f9cd 	bl	8000700 <GPIO_Init>


	GPIO_Handle_t Interrupt_Signal_struct;

	memset(&Interrupt_Signal_struct,0,sizeof(Interrupt_Signal_struct));
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	220c      	movs	r2, #12
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f000 ffef 	bl	8001352 <memset>
	Interrupt_Signal_struct.pGPIOx = GPIOA;
 8000374:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000378:	613b      	str	r3, [r7, #16]
	Interrupt_Signal_struct.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 800037a:	2305      	movs	r3, #5
 800037c:	757b      	strb	r3, [r7, #21]
	Interrupt_Signal_struct.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800037e:	2300      	movs	r3, #0
 8000380:	753b      	strb	r3, [r7, #20]
	Interrupt_Signal_struct.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000382:	2301      	movs	r3, #1
 8000384:	75fb      	strb	r3, [r7, #23]
	Interrupt_Signal_struct.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000386:	2301      	movs	r3, #1
 8000388:	763b      	strb	r3, [r7, #24]
	Interrupt_Signal_struct.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	767b      	strb	r3, [r7, #25]

	GPIO_Init(&Interrupt_Signal_struct); /*Initializing LEDnterrupt_Signal*/
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f9b4 	bl	8000700 <GPIO_Init>


	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000398:	2101      	movs	r1, #1
 800039a:	4818      	ldr	r0, [pc, #96]	; (80003fc <GPIOx_Init+0xe8>)
 800039c:	f000 f8e2 	bl	8000564 <GPIO_PeriClockControl>

	GPIO_Handle_t SPI_PIN_CONFIG;
	memset(&SPI_PIN_CONFIG, 0, sizeof(SPI_PIN_CONFIG));
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	220c      	movs	r2, #12
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 ffd3 	bl	8001352 <memset>
	SPI_PIN_CONFIG.pGPIOx = GPIOB;
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <GPIOx_Init+0xe8>)
 80003ae:	607b      	str	r3, [r7, #4]
	SPI_PIN_CONFIG.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80003b0:	2302      	movs	r3, #2
 80003b2:	727b      	strb	r3, [r7, #9]
	SPI_PIN_CONFIG.GPIO_PinConfig.GPIO_PinAltFunMode = AFN_5;
 80003b4:	2305      	movs	r3, #5
 80003b6:	737b      	strb	r3, [r7, #13]
	SPI_PIN_CONFIG.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003b8:	2300      	movs	r3, #0
 80003ba:	72fb      	strb	r3, [r7, #11]
	SPI_PIN_CONFIG.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80003bc:	2300      	movs	r3, #0
 80003be:	733b      	strb	r3, [r7, #12]
	SPI_PIN_CONFIG.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80003c0:	2302      	movs	r3, #2
 80003c2:	72bb      	strb	r3, [r7, #10]

	//MOSI
	SPI_PIN_CONFIG.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 80003c4:	230f      	movs	r3, #15
 80003c6:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_PIN_CONFIG); //CONFIGURANDO MOSI
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f998 	bl	8000700 <GPIO_Init>

	//MISO
	SPI_PIN_CONFIG.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 80003d0:	230e      	movs	r3, #14
 80003d2:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_PIN_CONFIG); /*Initializing MISO*/
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f992 	bl	8000700 <GPIO_Init>

	//SCK
	SPI_PIN_CONFIG.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80003dc:	230d      	movs	r3, #13
 80003de:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_PIN_CONFIG); //CONFIGURANDO SCK
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f98c 	bl	8000700 <GPIO_Init>

	//NSS
	SPI_PIN_CONFIG.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80003e8:	230c      	movs	r3, #12
 80003ea:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_PIN_CONFIG); //CONFIGURANDO NSS
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f986 	bl	8000700 <GPIO_Init>
}
 80003f4:	bf00      	nop
 80003f6:	3728      	adds	r7, #40	; 0x28
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	48000400 	.word	0x48000400

08000400 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	Delay(); //200 ms
 8000404:	f000 f814 	bl	8000430 <Delay>
	GPIO_IRQHandling(GPIO_PIN_0);
 8000408:	2000      	movs	r0, #0
 800040a:	f000 fc1f 	bl	8000c4c <GPIO_IRQHandling>
	Data_Available = 1;
 800040e:	4b02      	ldr	r3, [pc, #8]	; (8000418 <EXTI0_IRQHandler+0x18>)
 8000410:	2201      	movs	r2, #1
 8000412:	601a      	str	r2, [r3, #0]
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	2000001c 	.word	0x2000001c

0800041c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPI2Handle);
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <SPI2_IRQHandler+0x10>)
 8000422:	f000 fe45 	bl	80010b0 <SPI_IRQHandling>
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000024 	.word	0x20000024

08000430 <Delay>:

void Delay(void)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 50000 ; i++);
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	e002      	b.n	8000442 <Delay+0x12>
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	3301      	adds	r3, #1
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000448:	4293      	cmp	r3, r2
 800044a:	d9f7      	bls.n	800043c <Delay+0xc>
}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
	...

0800045c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0


	SPI2Handle.pSPIx = SPI2;
 8000460:	4b0e      	ldr	r3, [pc, #56]	; (800049c <SPI2_Inits+0x40>)
 8000462:	4a0f      	ldr	r2, [pc, #60]	; (80004a0 <SPI2_Inits+0x44>)
 8000464:	601a      	str	r2, [r3, #0]
	SPI2Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <SPI2_Inits+0x40>)
 8000468:	2201      	movs	r2, #1
 800046a:	715a      	strb	r2, [r3, #5]
	SPI2Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800046c:	4b0b      	ldr	r3, [pc, #44]	; (800049c <SPI2_Inits+0x40>)
 800046e:	2201      	movs	r2, #1
 8000470:	711a      	strb	r2, [r3, #4]
	SPI2Handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000472:	4b0a      	ldr	r3, [pc, #40]	; (800049c <SPI2_Inits+0x40>)
 8000474:	2200      	movs	r2, #0
 8000476:	719a      	strb	r2, [r3, #6]
	SPI2Handle.SPI_Config.SPI_DS = SPI_DS_8_BITS;
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <SPI2_Inits+0x40>)
 800047a:	2207      	movs	r2, #7
 800047c:	71da      	strb	r2, [r3, #7]
	SPI2Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <SPI2_Inits+0x40>)
 8000480:	2200      	movs	r2, #0
 8000482:	721a      	strb	r2, [r3, #8]
	SPI2Handle.SPI_Config.SPI_CPHA = SPI_CPHA_FIRST;
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <SPI2_Inits+0x40>)
 8000486:	2200      	movs	r2, #0
 8000488:	725a      	strb	r2, [r3, #9]
	SPI2Handle.SPI_Config.SPI_SSM = SPI_SSM_HW;
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <SPI2_Inits+0x40>)
 800048c:	2200      	movs	r2, #0
 800048e:	729a      	strb	r2, [r3, #10]
	//CONFIGURACION DE SPI2
	SPI_Init(&SPI2Handle);
 8000490:	4802      	ldr	r0, [pc, #8]	; (800049c <SPI2_Inits+0x40>)
 8000492:	f000 fc53 	bl	8000d3c <SPI_Init>
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000024 	.word	0x20000024
 80004a0:	40003800 	.word	0x40003800

080004a4 <SPI_ApplicationEventCallback>:

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;

	if(AppEv == SPI_EVENT_RX_CMPLT)
 80004b0:	78fb      	ldrb	r3, [r7, #3]
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d11d      	bne.n	80004f2 <SPI_ApplicationEventCallback+0x4e>
	{
		receive_data[i++] = read_byte;
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <SPI_ApplicationEventCallback+0x5c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	4910      	ldr	r1, [pc, #64]	; (8000500 <SPI_ApplicationEventCallback+0x5c>)
 80004be:	600a      	str	r2, [r1, #0]
 80004c0:	4a10      	ldr	r2, [pc, #64]	; (8000504 <SPI_ApplicationEventCallback+0x60>)
 80004c2:	7811      	ldrb	r1, [r2, #0]
 80004c4:	4a10      	ldr	r2, [pc, #64]	; (8000508 <SPI_ApplicationEventCallback+0x64>)
 80004c6:	54d1      	strb	r1, [r2, r3]

		if(read_byte == '$' || (i == MAX_LEN))
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <SPI_ApplicationEventCallback+0x60>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b24      	cmp	r3, #36	; 0x24
 80004ce:	d004      	beq.n	80004da <SPI_ApplicationEventCallback+0x36>
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <SPI_ApplicationEventCallback+0x5c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80004d8:	d10b      	bne.n	80004f2 <SPI_ApplicationEventCallback+0x4e>
		{
			Receive_Stop = 1;
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <SPI_ApplicationEventCallback+0x68>)
 80004dc:	2201      	movs	r2, #1
 80004de:	601a      	str	r2, [r3, #0]
			receive_data[i-1] = '\0';
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <SPI_ApplicationEventCallback+0x5c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <SPI_ApplicationEventCallback+0x64>)
 80004e8:	2100      	movs	r1, #0
 80004ea:	54d1      	strb	r1, [r2, r3]
			i=0;
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <SPI_ApplicationEventCallback+0x5c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
		}
	}

}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000234 	.word	0x20000234
 8000504:	2000003c 	.word	0x2000003c
 8000508:	20000040 	.word	0x20000040
 800050c:	20000020 	.word	0x20000020

08000510 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000514:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 800051a:	490d      	ldr	r1, [pc, #52]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000530:	4c0a      	ldr	r4, [pc, #40]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800053e:	f000 ff11 	bl	8001364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000542:	f7ff fe49 	bl	80001d8 <main>

08000546 <LoopForever>:

LoopForever:
  b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000554:	080013d4 	.word	0x080013d4
  ldr r2, =_sbss
 8000558:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800055c:	20000238 	.word	0x20000238

08000560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_2_IRQHandler>
	...

08000564 <GPIO_PeriClockControl>:
 * @EnorDi 					-Enable or disable MACRO
 *
 * @return 					- none
 */
void GPIO_PeriClockControl(GPIO_Reg_Def_t *pGPIOx, uint8_t EnorDi)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d157      	bne.n	8000626 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800057c:	d106      	bne.n	800058c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PERI_CLOCK_ENABLE();
 800057e:	4b58      	ldr	r3, [pc, #352]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a57      	ldr	r2, [pc, #348]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
			GPIOH_PERI_CLOCK_DISABLE();
		}
	}


}
 800058a:	e0a3      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a55      	ldr	r2, [pc, #340]	; (80006e4 <GPIO_PeriClockControl+0x180>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d106      	bne.n	80005a2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PERI_CLOCK_ENABLE();
 8000594:	4b52      	ldr	r3, [pc, #328]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 8000596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000598:	4a51      	ldr	r2, [pc, #324]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 800059a:	f043 0302 	orr.w	r3, r3, #2
 800059e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80005a0:	e098      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a50      	ldr	r2, [pc, #320]	; (80006e8 <GPIO_PeriClockControl+0x184>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d106      	bne.n	80005b8 <GPIO_PeriClockControl+0x54>
			GPIOC_PERI_CLOCK_ENABLE();
 80005aa:	4b4d      	ldr	r3, [pc, #308]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a4c      	ldr	r2, [pc, #304]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80005b6:	e08d      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a4c      	ldr	r2, [pc, #304]	; (80006ec <GPIO_PeriClockControl+0x188>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d106      	bne.n	80005ce <GPIO_PeriClockControl+0x6a>
			GPIOD_PERI_CLOCK_ENABLE();
 80005c0:	4b47      	ldr	r3, [pc, #284]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80005c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c4:	4a46      	ldr	r2, [pc, #280]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80005cc:	e082      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a47      	ldr	r2, [pc, #284]	; (80006f0 <GPIO_PeriClockControl+0x18c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d106      	bne.n	80005e4 <GPIO_PeriClockControl+0x80>
			GPIOE_PERI_CLOCK_ENABLE();
 80005d6:	4b42      	ldr	r3, [pc, #264]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a41      	ldr	r2, [pc, #260]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80005dc:	f043 0310 	orr.w	r3, r3, #16
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80005e2:	e077      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a43      	ldr	r2, [pc, #268]	; (80006f4 <GPIO_PeriClockControl+0x190>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d106      	bne.n	80005fa <GPIO_PeriClockControl+0x96>
			GPIOF_PERI_CLOCK_ENABLE();
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80005ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f0:	4a3b      	ldr	r2, [pc, #236]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80005f2:	f043 0320 	orr.w	r3, r3, #32
 80005f6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80005f8:	e06c      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a3e      	ldr	r2, [pc, #248]	; (80006f8 <GPIO_PeriClockControl+0x194>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d106      	bne.n	8000610 <GPIO_PeriClockControl+0xac>
			GPIOG_PERI_CLOCK_ENABLE();
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a36      	ldr	r2, [pc, #216]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 8000608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800060e:	e061      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a3a      	ldr	r2, [pc, #232]	; (80006fc <GPIO_PeriClockControl+0x198>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d15d      	bne.n	80006d4 <GPIO_PeriClockControl+0x170>
			GPIOH_PERI_CLOCK_ENABLE();
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 800061a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 800061e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000622:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000624:	e056      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800062c:	d106      	bne.n	800063c <GPIO_PeriClockControl+0xd8>
			GPIOA_PERI_CLOCK_DISABLE();
 800062e:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a2b      	ldr	r2, [pc, #172]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 8000634:	f023 0301 	bic.w	r3, r3, #1
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800063a:	e04b      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <GPIO_PeriClockControl+0x180>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d106      	bne.n	8000652 <GPIO_PeriClockControl+0xee>
			GPIOB_PERI_CLOCK_DISABLE();
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 8000646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000648:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 800064a:	f023 0302 	bic.w	r3, r3, #2
 800064e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000650:	e040      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a24      	ldr	r2, [pc, #144]	; (80006e8 <GPIO_PeriClockControl+0x184>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d106      	bne.n	8000668 <GPIO_PeriClockControl+0x104>
			GPIOC_PERI_CLOCK_DISABLE();
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 8000660:	f023 0304 	bic.w	r3, r3, #4
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000666:	e035      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <GPIO_PeriClockControl+0x188>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d106      	bne.n	800067e <GPIO_PeriClockControl+0x11a>
			GPIOD_PERI_CLOCK_DISABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 8000672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 8000676:	f023 0308 	bic.w	r3, r3, #8
 800067a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800067c:	e02a      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <GPIO_PeriClockControl+0x18c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d106      	bne.n	8000694 <GPIO_PeriClockControl+0x130>
			GPIOE_PERI_CLOCK_DISABLE();
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a15      	ldr	r2, [pc, #84]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 800068c:	f023 0310 	bic.w	r3, r3, #16
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000692:	e01f      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <GPIO_PeriClockControl+0x190>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d106      	bne.n	80006aa <GPIO_PeriClockControl+0x146>
			GPIOF_PERI_CLOCK_DISABLE();
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 800069e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a0:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80006a2:	f023 0320 	bic.w	r3, r3, #32
 80006a6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80006a8:	e014      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <GPIO_PeriClockControl+0x194>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d106      	bne.n	80006c0 <GPIO_PeriClockControl+0x15c>
			GPIOG_PERI_CLOCK_DISABLE();
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80006b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006bc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80006be:	e009      	b.n	80006d4 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <GPIO_PeriClockControl+0x198>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d105      	bne.n	80006d4 <GPIO_PeriClockControl+0x170>
			GPIOH_PERI_CLOCK_DISABLE();
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80006ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <GPIO_PeriClockControl+0x17c>)
 80006ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006d2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400
 80006f8:	48001800 	.word	0x48001800
 80006fc:	48001c00 	.word	0x48001c00

08000700 <GPIO_Init>:
 * @param pGPIOHandle 		- Pointer to the GPIO handle structure
 *
 * @return 					- None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000700:	b480      	push	{r7}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
	//1.-Configure the mode of the GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	795b      	ldrb	r3, [r3, #5]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d820      	bhi.n	8000756 <GPIO_Init+0x56>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	2103      	movs	r1, #3
 8000734:	fa01 f303 	lsl.w	r3, r1, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	400a      	ands	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6819      	ldr	r1, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	430a      	orrs	r2, r1
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e10b      	b.n	800096e <GPIO_Init+0x26e>
	}
	else
	{
		//codigo en las siguientes clases (interrupciones)
		/*Check and configure if is rising trigger, falling trigger or falling and rising trigger*/
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	795b      	ldrb	r3, [r3, #5]
 800075a:	2b04      	cmp	r3, #4
 800075c:	d130      	bne.n	80007c0 <GPIO_Init+0xc0>
		{
			//Configuring input
			temp = (GPIO_MODE_IN << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	2103      	movs	r1, #3
 8000770:	fa01 f303 	lsl.w	r3, r1, r3
 8000774:	43db      	mvns	r3, r3
 8000776:	4619      	mov	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	400a      	ands	r2, r1
 800077e:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6819      	ldr	r1, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	697a      	ldr	r2, [r7, #20]
 800078c:	430a      	orrs	r2, r1
 800078e:	601a      	str	r2, [r3, #0]

			//1.- Configure the FTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000790:	4b60      	ldr	r3, [pc, #384]	; (8000914 <GPIO_Init+0x214>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	7912      	ldrb	r2, [r2, #4]
 8000798:	4611      	mov	r1, r2
 800079a:	2201      	movs	r2, #1
 800079c:	408a      	lsls	r2, r1
 800079e:	4611      	mov	r1, r2
 80007a0:	4a5c      	ldr	r2, [pc, #368]	; (8000914 <GPIO_Init+0x214>)
 80007a2:	430b      	orrs	r3, r1
 80007a4:	60d3      	str	r3, [r2, #12]
			//clear the RTSR bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a6:	4b5b      	ldr	r3, [pc, #364]	; (8000914 <GPIO_Init+0x214>)
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	7912      	ldrb	r2, [r2, #4]
 80007ae:	4611      	mov	r1, r2
 80007b0:	2201      	movs	r2, #1
 80007b2:	408a      	lsls	r2, r1
 80007b4:	43d2      	mvns	r2, r2
 80007b6:	4611      	mov	r1, r2
 80007b8:	4a56      	ldr	r2, [pc, #344]	; (8000914 <GPIO_Init+0x214>)
 80007ba:	400b      	ands	r3, r1
 80007bc:	6093      	str	r3, [r2, #8]
 80007be:	e067      	b.n	8000890 <GPIO_Init+0x190>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	795b      	ldrb	r3, [r3, #5]
 80007c4:	2b05      	cmp	r3, #5
 80007c6:	d130      	bne.n	800082a <GPIO_Init+0x12a>
		{
			//Configuring input
			temp = (GPIO_MODE_IN << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	791b      	ldrb	r3, [r3, #4]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	2103      	movs	r1, #3
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	400a      	ands	r2, r1
 80007e8:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	601a      	str	r2, [r3, #0]
			//1.- Configure the RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007fa:	4b46      	ldr	r3, [pc, #280]	; (8000914 <GPIO_Init+0x214>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	7912      	ldrb	r2, [r2, #4]
 8000802:	4611      	mov	r1, r2
 8000804:	2201      	movs	r2, #1
 8000806:	408a      	lsls	r2, r1
 8000808:	4611      	mov	r1, r2
 800080a:	4a42      	ldr	r2, [pc, #264]	; (8000914 <GPIO_Init+0x214>)
 800080c:	430b      	orrs	r3, r1
 800080e:	6093      	str	r3, [r2, #8]
			//clear the FTSR bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000810:	4b40      	ldr	r3, [pc, #256]	; (8000914 <GPIO_Init+0x214>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	7912      	ldrb	r2, [r2, #4]
 8000818:	4611      	mov	r1, r2
 800081a:	2201      	movs	r2, #1
 800081c:	408a      	lsls	r2, r1
 800081e:	43d2      	mvns	r2, r2
 8000820:	4611      	mov	r1, r2
 8000822:	4a3c      	ldr	r2, [pc, #240]	; (8000914 <GPIO_Init+0x214>)
 8000824:	400b      	ands	r3, r1
 8000826:	60d3      	str	r3, [r2, #12]
 8000828:	e032      	b.n	8000890 <GPIO_Init+0x190>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT_RT)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	795b      	ldrb	r3, [r3, #5]
 800082e:	2b06      	cmp	r3, #6
 8000830:	d12e      	bne.n	8000890 <GPIO_Init+0x190>
		{
			//Configuring input
			temp = (GPIO_MODE_IN << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	2103      	movs	r1, #3
 8000844:	fa01 f303 	lsl.w	r3, r1, r3
 8000848:	43db      	mvns	r3, r3
 800084a:	4619      	mov	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	400a      	ands	r2, r1
 8000852:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6819      	ldr	r1, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	430a      	orrs	r2, r1
 8000862:	601a      	str	r2, [r3, #0]
			//1.- Configure both FTSR and RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000864:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <GPIO_Init+0x214>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	7912      	ldrb	r2, [r2, #4]
 800086c:	4611      	mov	r1, r2
 800086e:	2201      	movs	r2, #1
 8000870:	408a      	lsls	r2, r1
 8000872:	4611      	mov	r1, r2
 8000874:	4a27      	ldr	r2, [pc, #156]	; (8000914 <GPIO_Init+0x214>)
 8000876:	430b      	orrs	r3, r1
 8000878:	6093      	str	r3, [r2, #8]

			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <GPIO_Init+0x214>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	7912      	ldrb	r2, [r2, #4]
 8000882:	4611      	mov	r1, r2
 8000884:	2201      	movs	r2, #1
 8000886:	408a      	lsls	r2, r1
 8000888:	4611      	mov	r1, r2
 800088a:	4a22      	ldr	r2, [pc, #136]	; (8000914 <GPIO_Init+0x214>)
 800088c:	430b      	orrs	r3, r1
 800088e:	60d3      	str	r3, [r2, #12]
		}

		//2.- Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t tmp1, tmp2;
		tmp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	791b      	ldrb	r3, [r3, #4]
 8000894:	089b      	lsrs	r3, r3, #2
 8000896:	74fb      	strb	r3, [r7, #19]
		tmp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	791b      	ldrb	r3, [r3, #4]
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80008aa:	d043      	beq.n	8000934 <GPIO_Init+0x234>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <GPIO_Init+0x218>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d02b      	beq.n	800090e <GPIO_Init+0x20e>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <GPIO_Init+0x21c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d024      	beq.n	800090a <GPIO_Init+0x20a>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a16      	ldr	r2, [pc, #88]	; (8000920 <GPIO_Init+0x220>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d01d      	beq.n	8000906 <GPIO_Init+0x206>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <GPIO_Init+0x224>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d016      	beq.n	8000902 <GPIO_Init+0x202>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <GPIO_Init+0x228>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d00f      	beq.n	80008fe <GPIO_Init+0x1fe>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <GPIO_Init+0x22c>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d008      	beq.n	80008fa <GPIO_Init+0x1fa>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a10      	ldr	r2, [pc, #64]	; (8000930 <GPIO_Init+0x230>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d101      	bne.n	80008f6 <GPIO_Init+0x1f6>
 80008f2:	2307      	movs	r3, #7
 80008f4:	e01f      	b.n	8000936 <GPIO_Init+0x236>
 80008f6:	2300      	movs	r3, #0
 80008f8:	e01d      	b.n	8000936 <GPIO_Init+0x236>
 80008fa:	2306      	movs	r3, #6
 80008fc:	e01b      	b.n	8000936 <GPIO_Init+0x236>
 80008fe:	2305      	movs	r3, #5
 8000900:	e019      	b.n	8000936 <GPIO_Init+0x236>
 8000902:	2304      	movs	r3, #4
 8000904:	e017      	b.n	8000936 <GPIO_Init+0x236>
 8000906:	2303      	movs	r3, #3
 8000908:	e015      	b.n	8000936 <GPIO_Init+0x236>
 800090a:	2302      	movs	r3, #2
 800090c:	e013      	b.n	8000936 <GPIO_Init+0x236>
 800090e:	2301      	movs	r3, #1
 8000910:	e011      	b.n	8000936 <GPIO_Init+0x236>
 8000912:	bf00      	nop
 8000914:	40010400 	.word	0x40010400
 8000918:	48000400 	.word	0x48000400
 800091c:	48000800 	.word	0x48000800
 8000920:	48000c00 	.word	0x48000c00
 8000924:	48001000 	.word	0x48001000
 8000928:	48001400 	.word	0x48001400
 800092c:	48001800 	.word	0x48001800
 8000930:	48001c00 	.word	0x48001c00
 8000934:	2300      	movs	r3, #0
 8000936:	747b      	strb	r3, [r7, #17]
		SYSCFG_PERI_CLOCK_ENABLE();
 8000938:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <GPIO_Init+0x3b4>)
 800093a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093c:	4a5d      	ldr	r2, [pc, #372]	; (8000ab4 <GPIO_Init+0x3b4>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6613      	str	r3, [r2, #96]	; 0x60
		SYSCFG->EXTICR[tmp1] = portcode << (tmp2*4);
 8000944:	7c7a      	ldrb	r2, [r7, #17]
 8000946:	7cbb      	ldrb	r3, [r7, #18]
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	fa02 f103 	lsl.w	r1, r2, r3
 800094e:	4a5a      	ldr	r2, [pc, #360]	; (8000ab8 <GPIO_Init+0x3b8>)
 8000950:	7cfb      	ldrb	r3, [r7, #19]
 8000952:	3302      	adds	r3, #2
 8000954:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3.- Enable the EXTI interrupt delivery using IMR
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000958:	4b58      	ldr	r3, [pc, #352]	; (8000abc <GPIO_Init+0x3bc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	7912      	ldrb	r2, [r2, #4]
 8000960:	4611      	mov	r1, r2
 8000962:	2201      	movs	r2, #1
 8000964:	408a      	lsls	r2, r1
 8000966:	4611      	mov	r1, r2
 8000968:	4a54      	ldr	r2, [pc, #336]	; (8000abc <GPIO_Init+0x3bc>)
 800096a:	430b      	orrs	r3, r1
 800096c:	6013      	str	r3, [r2, #0]
	}

	//2.-Configure the speed
	temp=0;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	799b      	ldrb	r3, [r3, #6]
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	2103      	movs	r1, #3
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	4619      	mov	r1, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	400a      	ands	r2, r1
 80009a0:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6899      	ldr	r1, [r3, #8]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	697a      	ldr	r2, [r7, #20]
 80009ae:	430a      	orrs	r2, r1
 80009b0:	609a      	str	r2, [r3, #8]

	//3.-Configure the pupd settings
	temp=0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	79db      	ldrb	r3, [r3, #7]
 80009ba:	461a      	mov	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	791b      	ldrb	r3, [r3, #4]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	68da      	ldr	r2, [r3, #12]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	791b      	ldrb	r3, [r3, #4]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	2103      	movs	r1, #3
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	4619      	mov	r1, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	400a      	ands	r2, r1
 80009e4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	68d9      	ldr	r1, [r3, #12]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	60da      	str	r2, [r3, #12]
	//4.-Configure the optype
	temp=0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7a1b      	ldrb	r3, [r3, #8]
 80009fe:	461a      	mov	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	791b      	ldrb	r3, [r3, #4]
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	791b      	ldrb	r3, [r3, #4]
 8000a14:	4619      	mov	r1, r3
 8000a16:	2301      	movs	r3, #1
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	400a      	ands	r2, r1
 8000a24:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6859      	ldr	r1, [r3, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	430a      	orrs	r2, r1
 8000a34:	605a      	str	r2, [r3, #4]
	temp=0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
	//5.-Configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	795b      	ldrb	r3, [r3, #5]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d131      	bne.n	8000aa6 <GPIO_Init+0x3a6>
	{
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	791b      	ldrb	r3, [r3, #4]
 8000a46:	08db      	lsrs	r3, r3, #3
 8000a48:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	791b      	ldrb	r3, [r3, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	7c3a      	ldrb	r2, [r7, #16]
 8000a5a:	3208      	adds	r2, #8
 8000a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	220f      	movs	r2, #15
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	7c3a      	ldrb	r2, [r7, #16]
 8000a74:	4001      	ands	r1, r0
 8000a76:	3208      	adds	r2, #8
 8000a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	7c3a      	ldrb	r2, [r7, #16]
 8000a82:	3208      	adds	r2, #8
 8000a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7a5b      	ldrb	r3, [r3, #9]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	7c3a      	ldrb	r2, [r7, #16]
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	3208      	adds	r2, #8
 8000aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000aa6:	bf00      	nop
 8000aa8:	371c      	adds	r7, #28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010000 	.word	0x40010000
 8000abc:	40010400 	.word	0x40010400

08000ac0 <GPIO_ToggleOutputPin>:
 * @param PinNumber 		- Pin number
 *
 * @return 					- None
 */
void GPIO_ToggleOutputPin(GPIO_Reg_Def_t *pGPIOx, uint8_t PinNumber)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	78fa      	ldrb	r2, [r7, #3]
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad8:	405a      	eors	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	615a      	str	r2, [r3, #20]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <GPIO_IRQInterruptConfig>:

/*IRQ configuration and handling*/
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	460a      	mov	r2, r1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d133      	bne.n	8000b6a <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b1f      	cmp	r3, #31
 8000b06:	d80a      	bhi.n	8000b1e <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000b08:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <GPIO_IRQInterruptConfig+0xf4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	79fa      	ldrb	r2, [r7, #7]
 8000b0e:	2101      	movs	r1, #1
 8000b10:	fa01 f202 	lsl.w	r2, r1, r2
 8000b14:	4611      	mov	r1, r2
 8000b16:	4a32      	ldr	r2, [pc, #200]	; (8000be0 <GPIO_IRQInterruptConfig+0xf4>)
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	6013      	str	r3, [r2, #0]
		{
			//program ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber %64));
		}
	}
}
 8000b1c:	e059      	b.n	8000bd2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b1f      	cmp	r3, #31
 8000b22:	d90f      	bls.n	8000b44 <GPIO_IRQInterruptConfig+0x58>
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b3f      	cmp	r3, #63	; 0x3f
 8000b28:	d80c      	bhi.n	8000b44 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000b2a:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <GPIO_IRQInterruptConfig+0xf8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	f002 021f 	and.w	r2, r2, #31
 8000b34:	2101      	movs	r1, #1
 8000b36:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <GPIO_IRQInterruptConfig+0xf8>)
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	e046      	b.n	8000bd2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 64 && IRQNumber < 96)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2b40      	cmp	r3, #64	; 0x40
 8000b48:	d943      	bls.n	8000bd2 <GPIO_IRQInterruptConfig+0xe6>
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b5f      	cmp	r3, #95	; 0x5f
 8000b4e:	d840      	bhi.n	8000bd2 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <GPIO_IRQInterruptConfig+0xfc>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b60:	4611      	mov	r1, r2
 8000b62:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <GPIO_IRQInterruptConfig+0xfc>)
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	e033      	b.n	8000bd2 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b1f      	cmp	r3, #31
 8000b6e:	d80a      	bhi.n	8000b86 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <GPIO_IRQInterruptConfig+0x100>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	2101      	movs	r1, #1
 8000b78:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <GPIO_IRQInterruptConfig+0x100>)
 8000b80:	430b      	orrs	r3, r1
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	e025      	b.n	8000bd2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b1f      	cmp	r3, #31
 8000b8a:	d90f      	bls.n	8000bac <GPIO_IRQInterruptConfig+0xc0>
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b90:	d80c      	bhi.n	8000bac <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber %32));
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <GPIO_IRQInterruptConfig+0x104>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	79fa      	ldrb	r2, [r7, #7]
 8000b98:	f002 021f 	and.w	r2, r2, #31
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <GPIO_IRQInterruptConfig+0x104>)
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e012      	b.n	8000bd2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 64 && IRQNumber < 96)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b40      	cmp	r3, #64	; 0x40
 8000bb0:	d90f      	bls.n	8000bd2 <GPIO_IRQInterruptConfig+0xe6>
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b5f      	cmp	r3, #95	; 0x5f
 8000bb6:	d80c      	bhi.n	8000bd2 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber %64));
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <GPIO_IRQInterruptConfig+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <GPIO_IRQInterruptConfig+0x108>)
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	e7ff      	b.n	8000bd2 <GPIO_IRQInterruptConfig+0xe6>
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000e104 	.word	0xe000e104
 8000be8:	e000e108 	.word	0xe000e108
 8000bec:	e000e180 	.word	0xe000e180
 8000bf0:	e000e184 	.word	0xe000e184
 8000bf4:	e000e188 	.word	0xe000e188

08000bf8 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig (uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
	//1 first find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_value = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000c12:	7bbb      	ldrb	r3, [r7, #14]
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	3304      	adds	r3, #4
 8000c1a:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE_ADDR + (iprx)) |= (IRQPriority << shift_value);
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000c24:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000c28:	6819      	ldr	r1, [r3, #0]
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000c38:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	if(EXTI->PR1 & (1 << PinNumber))
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <GPIO_IRQHandling+0x3c>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d009      	beq.n	8000c7c <GPIO_IRQHandling+0x30>
	{
		//limpiar la bandera de la interrupción
		EXTI->PR1 |= (1 << PinNumber);
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <GPIO_IRQHandling+0x3c>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	79fa      	ldrb	r2, [r7, #7]
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	4611      	mov	r1, r2
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <GPIO_IRQHandling+0x3c>)
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6153      	str	r3, [r2, #20]
	}
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	40010400 	.word	0x40010400

08000c8c <SPI_PeriClockControl>:
 * @EnorDi 					-Enable or disable MACRO
 *
 * @return 					- none
 */
void SPI_PeriClockControl(SPI_Reg_Def_t *pSPIx, uint8_t EnorDi)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c98:	78fb      	ldrb	r3, [r7, #3]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d120      	bne.n	8000ce0 <SPI_PeriClockControl+0x54>
		{
			if(pSPIx == SPI1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a22      	ldr	r2, [pc, #136]	; (8000d2c <SPI_PeriClockControl+0xa0>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d106      	bne.n	8000cb4 <SPI_PeriClockControl+0x28>
			{
				SPI1_PERI_CLOCK_ENABLE();
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <SPI_PeriClockControl+0xa4>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000caa:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <SPI_PeriClockControl+0xa4>)
 8000cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb0:	6613      	str	r3, [r2, #96]	; 0x60
		else if (pSPIx == SPI3)
		{
			SPI3_PERI_CLOCK_DISABLE();
		}
	}
}
 8000cb2:	e035      	b.n	8000d20 <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <SPI_PeriClockControl+0xa8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d106      	bne.n	8000cca <SPI_PeriClockControl+0x3e>
				SPI2_PERI_CLOCK_ENABLE();
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <SPI_PeriClockControl+0xa4>)
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <SPI_PeriClockControl+0xa4>)
 8000cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc6:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000cc8:	e02a      	b.n	8000d20 <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI3)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a1a      	ldr	r2, [pc, #104]	; (8000d38 <SPI_PeriClockControl+0xac>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d126      	bne.n	8000d20 <SPI_PeriClockControl+0x94>
				SPI3_PERI_CLOCK_ENABLE();
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <SPI_PeriClockControl+0xa4>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <SPI_PeriClockControl+0xa4>)
 8000cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cdc:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000cde:	e01f      	b.n	8000d20 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <SPI_PeriClockControl+0xa0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d106      	bne.n	8000cf6 <SPI_PeriClockControl+0x6a>
			SPI1_PERI_CLOCK_DISABLE();
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <SPI_PeriClockControl+0xa4>)
 8000cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cec:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <SPI_PeriClockControl+0xa4>)
 8000cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cf2:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000cf4:	e014      	b.n	8000d20 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI2)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <SPI_PeriClockControl+0xa8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d106      	bne.n	8000d0c <SPI_PeriClockControl+0x80>
			SPI2_PERI_CLOCK_DISABLE();
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <SPI_PeriClockControl+0xa4>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <SPI_PeriClockControl+0xa4>)
 8000d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000d0a:	e009      	b.n	8000d20 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <SPI_PeriClockControl+0xac>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d105      	bne.n	8000d20 <SPI_PeriClockControl+0x94>
			SPI3_PERI_CLOCK_DISABLE();
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <SPI_PeriClockControl+0xa4>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d18:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <SPI_PeriClockControl+0xa4>)
 8000d1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d1e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40013000 	.word	0x40013000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40003800 	.word	0x40003800
 8000d38:	40003c00 	.word	0x40003c00

08000d3c <SPI_Init>:
 * @param SPI_Handle_t 		- Pointer to the SPI handle structure
 *
 * @return 					- None
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	//Peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff9e 	bl	8000c8c <SPI_PeriClockControl>

	//first configure CR1 register
	uint32_t tempreg = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]

	//1. Configurar el modo del dispositivo
	tempreg |= pSPIHandle->SPI_Config.SPI_DeviceMode << MSTR_BIT;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	791b      	ldrb	r3, [r3, #4]
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]

	//2. Configurar el bus
	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	795b      	ldrb	r3, [r3, #5]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d104      	bne.n	8000d74 <SPI_Init+0x38>
	{
		//Bit BIDI MODE debe ser 0 (2-line unidirectional data mode selected)
		tempreg &= ~(1<< BIDIMODE_BIT);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	e014      	b.n	8000d9e <SPI_Init+0x62>
	}else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	795b      	ldrb	r3, [r3, #5]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d104      	bne.n	8000d86 <SPI_Init+0x4a>
	{
		//Bit BIDI MODE debe ser 1 (1-line bidirectional data mode selected)
		tempreg |= (1 << BIDIMODE_BIT);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	e00b      	b.n	8000d9e <SPI_Init+0x62>
	}else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_S_RXONLY)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	795b      	ldrb	r3, [r3, #5]
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	d107      	bne.n	8000d9e <SPI_Init+0x62>
	{
		//Bit BIDI MODE debe ser 0 (2-line unidirectional data mode selected)
		//BIT RXONLY debe ser 1 (enables simplex communication using a single unidirectional line to receive data exclusively.)
		tempreg &= ~(1 << BIDIMODE_BIT);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d94:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << RXONLY_BIT);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9c:	60fb      	str	r3, [r7, #12]
	}

	//3. Configurar velocidad
	tempreg &= ~(3 <<  BR_BIT);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f023 0318 	bic.w	r3, r3, #24
 8000da4:	60fb      	str	r3, [r7, #12]
	tempreg |= (pSPIHandle->SPI_Config.SPI_SclkSpeed << BR_BIT);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	799b      	ldrb	r3, [r3, #6]
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	461a      	mov	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]

	//4. Configurar CLOCK POLARITY CPOL (estado del reloj en idle)
	tempreg |= (pSPIHandle->SPI_Config.SPI_CPOL << CPOL_BIT);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7a1b      	ldrb	r3, [r3, #8]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]

	//5. Configurar CLOCK PHASE CPHA (en que flanco va a ser muestreada la información)
	tempreg |= (pSPIHandle->SPI_Config.SPI_CPHA << CPHA_BIT);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7a5b      	ldrb	r3, [r3, #9]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]

	//6. Configurar Slave Select ++++SW or HW?
	tempreg |= (pSPIHandle->SPI_Config.SPI_SSM << SSM_BIT);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7a9b      	ldrb	r3, [r3, #10]
 8000dd2:	025b      	lsls	r3, r3, #9
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6819      	ldr	r1, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]

	//7 configure data size in CR2 register
	pSPIHandle->pSPIx->CR2 |= (pSPIHandle->SPI_Config.SPI_DS << DS_BIT);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	79db      	ldrb	r3, [r3, #7]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	4619      	mov	r1, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	605a      	str	r2, [r3, #4]
	if(pSPIHandle->SPI_Config.SPI_DS == SPI_DS_8_BITS)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	79db      	ldrb	r3, [r3, #7]
 8000e06:	2b07      	cmp	r3, #7
 8000e08:	d107      	bne.n	8000e1a <SPI_Init+0xde>
	{
		pSPIHandle->pSPIx->CR2 |= (THRESHOLD_8_BIT << FRXTH_BIT);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e18:	605a      	str	r2, [r3, #4]
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <SPI_GetFlagStatus>:

	}
}

uint8_t SPI_GetFlagStatus(SPI_Reg_Def_t *pSPIx, uint32_t FlagName)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <SPI_SSOEConfig>:
		pSPIx->CR1 &= ~(1 << SSI_BIT);
	}
}

void SPI_SSOEConfig(SPI_Reg_Def_t *pSPIx,uint8_t EnorDi)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e56:	78fb      	ldrb	r3, [r7, #3]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d106      	bne.n	8000e6a <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SSOE_BIT);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f043 0204 	orr.w	r2, r3, #4
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SSOE_BIT);
	}
}
 8000e68:	e005      	b.n	8000e76 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SSOE_BIT);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f023 0204 	bic.w	r2, r3, #4
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	605a      	str	r2, [r3, #4]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <SPI_PeripheralClontrol>:

void SPI_PeripheralClontrol(SPI_Reg_Def_t *pSPIx,uint8_t EnorDi)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d106      	bne.n	8000ea2 <SPI_PeripheralClontrol+0x20>
	{
		pSPIx->CR1 |= (1 << SPE_BIT);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPE_BIT);
	}
}
 8000ea0:	e005      	b.n	8000eae <SPI_PeripheralClontrol+0x2c>
		pSPIx->CR1 &= ~(1 << SPE_BIT);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	601a      	str	r2, [r3, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SPI_IRQInterruptConfig>:
 * @param EnorDi 			- Enable or disable
 *
 * @return 					- None
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d133      	bne.n	8000f3a <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b1f      	cmp	r3, #31
 8000ed6:	d80a      	bhi.n	8000eee <SPI_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000ed8:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <SPI_IRQInterruptConfig+0xf4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	79fa      	ldrb	r2, [r7, #7]
 8000ede:	2101      	movs	r1, #1
 8000ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4a32      	ldr	r2, [pc, #200]	; (8000fb0 <SPI_IRQInterruptConfig+0xf4>)
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	6013      	str	r3, [r2, #0]
		{
			//program ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber %64));
		}
	}
}
 8000eec:	e059      	b.n	8000fa2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b1f      	cmp	r3, #31
 8000ef2:	d90f      	bls.n	8000f14 <SPI_IRQInterruptConfig+0x58>
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef8:	d80c      	bhi.n	8000f14 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <SPI_IRQInterruptConfig+0xf8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	f002 021f 	and.w	r2, r2, #31
 8000f04:	2101      	movs	r1, #1
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <SPI_IRQInterruptConfig+0xf8>)
 8000f0e:	430b      	orrs	r3, r1
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e046      	b.n	8000fa2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 64 && IRQNumber < 96)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b40      	cmp	r3, #64	; 0x40
 8000f18:	d943      	bls.n	8000fa2 <SPI_IRQInterruptConfig+0xe6>
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b5f      	cmp	r3, #95	; 0x5f
 8000f1e:	d840      	bhi.n	8000fa2 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <SPI_IRQInterruptConfig+0xfc>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	79fa      	ldrb	r2, [r7, #7]
 8000f26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f30:	4611      	mov	r1, r2
 8000f32:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <SPI_IRQInterruptConfig+0xfc>)
 8000f34:	430b      	orrs	r3, r1
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	e033      	b.n	8000fa2 <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b1f      	cmp	r3, #31
 8000f3e:	d80a      	bhi.n	8000f56 <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <SPI_IRQInterruptConfig+0x100>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <SPI_IRQInterruptConfig+0x100>)
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	e025      	b.n	8000fa2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b1f      	cmp	r3, #31
 8000f5a:	d90f      	bls.n	8000f7c <SPI_IRQInterruptConfig+0xc0>
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f60:	d80c      	bhi.n	8000f7c <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber %32));
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <SPI_IRQInterruptConfig+0x104>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	79fa      	ldrb	r2, [r7, #7]
 8000f68:	f002 021f 	and.w	r2, r2, #31
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f72:	4611      	mov	r1, r2
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <SPI_IRQInterruptConfig+0x104>)
 8000f76:	430b      	orrs	r3, r1
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e012      	b.n	8000fa2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 64 && IRQNumber < 96)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b40      	cmp	r3, #64	; 0x40
 8000f80:	d90f      	bls.n	8000fa2 <SPI_IRQInterruptConfig+0xe6>
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b5f      	cmp	r3, #95	; 0x5f
 8000f86:	d80c      	bhi.n	8000fa2 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber %64));
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <SPI_IRQInterruptConfig+0x108>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f202 	lsl.w	r2, r1, r2
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <SPI_IRQInterruptConfig+0x108>)
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	e7ff      	b.n	8000fa2 <SPI_IRQInterruptConfig+0xe6>
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000e104 	.word	0xe000e104
 8000fb8:	e000e108 	.word	0xe000e108
 8000fbc:	e000e180 	.word	0xe000e180
 8000fc0:	e000e184 	.word	0xe000e184
 8000fc4:	e000e188 	.word	0xe000e188

08000fc8 <SPI_IRQPriorityConfig>:

void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
	//1 first find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_value = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3304      	adds	r3, #4
 8000fea:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE_ADDR + (iprx)) |= (IRQPriority << shift_value);
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ff4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000ff8:	6819      	ldr	r1, [r3, #0]
 8000ffa:	7b7b      	ldrb	r3, [r7, #13]
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	409a      	lsls	r2, r3
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001008:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800100c:	430a      	orrs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <SPI_SendDataIT>:


uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	7d9b      	ldrb	r3, [r3, #22]
 800102c:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 800102e:	7dfb      	ldrb	r3, [r7, #23]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d011      	beq.n	8001058 <SPI_SendDataIT+0x3c>
	{
		//1.-Guardar la dirección del TX buffer en una variable global
		pSPIHandle->pTxBuffer = pTxBuffer;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	751a      	strb	r2, [r3, #20]

		//2.- Marcar el estado de SPI como ocupado en transmision, para que ningúng otro código pueda usar el mismo SPI.
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2202      	movs	r2, #2
 8001046:	759a      	strb	r2, [r3, #22]
		//3.- Habilitar la interrupción TXEIE (a nivel del microcontrolador)
		pSPIHandle->pSPIx->CR2 |= (ENABLE << TXEIE_BIT);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001056:	605a      	str	r2, [r3, #4]
	}



//4.- Transmision de datos se va a llevar acabo por el Interrupt Service Routine.( se implementará después )
	return state;
 8001058:	7dfb      	ldrb	r3, [r7, #23]
}
 800105a:	4618      	mov	r0, r3
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <SPI_ReceiveDataIT>:

uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8001066:	b480      	push	{r7}
 8001068:	b087      	sub	sp, #28
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->RxState;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	7ddb      	ldrb	r3, [r3, #23]
 8001076:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX)
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d011      	beq.n	80010a2 <SPI_ReceiveDataIT+0x3c>
	{
		//1.- Save the Tx buffer address and len information in some global variables
			pSPIHandle->pRxBuffer = pTxBuffer;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	611a      	str	r2, [r3, #16]
			pSPIHandle->RxLen = Len;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	755a      	strb	r2, [r3, #21]
		//2.- Mark the SPI state as busy in transmission so that no other code can take over same
		//    SPI peripheral until transmission is over
			pSPIHandle->RxState = SPI_BUSY_IN_RX;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2201      	movs	r2, #1
 8001090:	75da      	strb	r2, [r3, #23]
		//3.- Enable the RXNEIE control bit to get interrupt whenever TXE flag is set in SR
			pSPIHandle->pSPIx->CR2 |= (ENABLE << RXNEIE_BIT);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010a0:	605a      	str	r2, [r3, #4]
	}
	return state;
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	371c      	adds	r7, #28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <SPI_IRQHandling>:

void SPI_IRQHandling(SPI_Handle_t *pSPIHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

	uint8_t temp1, temp2;

	//First check for TXE
	temp1 = pSPIHandle->pSPIx->SR & (1 << TXE_BIT);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << TXEIE_BIT);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80010d2:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2)
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <SPI_IRQHandling+0x36>
 80010da:	7bbb      	ldrb	r3, [r7, #14]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <SPI_IRQHandling+0x36>
	{
		//handle TXE
		spi_txe_interrupt_handle(pSPIHandle);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f832 	bl	800114a <spi_txe_interrupt_handle>
	}

	//check for RXNE
	temp1 = pSPIHandle->pSPIx->SR & (1 << RXNE_BIT);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << RXNEIE_BIT);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001100:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2)
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <SPI_IRQHandling+0x64>
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <SPI_IRQHandling+0x64>
	{
		//handle RXNE
		spi_rxne_interrupt_handle(pSPIHandle);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f876 	bl	8001200 <spi_rxne_interrupt_handle>
	}

	//check for ovr flag
	temp1 = pSPIHandle->pSPIx->SR & (1 << OVR_BIT);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001120:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << ERRIE_BIT);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	73bb      	strb	r3, [r7, #14]
	if(temp1 && temp2)
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <SPI_IRQHandling+0x92>
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <SPI_IRQHandling+0x92>
	{
		//handle RXNE
		spi_ovr_interrupt_handle(pSPIHandle);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f8ba 	bl	80012b6 <spi_ovr_interrupt_handle>
	}
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <spi_txe_interrupt_handle>:

static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]

		if((pSPIHandle->pSPIx->CR2>>8 & 0xF) ==  SPI_DS_8_BITS) /*Evaluar si el data size es 8 bits*/
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	2b07      	cmp	r3, #7
 8001160:	d112      	bne.n	8001188 <spi_txe_interrupt_handle+0x3e>
		{
			//8 bits data size
			*((__vo uint8_t*)&pSPIHandle->pSPIx->DR) = *((uint8_t*)pSPIHandle->pTxBuffer);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	330c      	adds	r3, #12
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	701a      	strb	r2, [r3, #0]
			pSPIHandle->TxLen--;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7d1b      	ldrb	r3, [r3, #20]
 8001174:	3b01      	subs	r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	751a      	strb	r2, [r3, #20]
			pSPIHandle->pTxBuffer++;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	e02c      	b.n	80011e2 <spi_txe_interrupt_handle+0x98>
		}else if((pSPIHandle->pSPIx->CR2>>8 & 0xF) ==  SPI_DS_16_BITS) /*Evaluar si el data size es 16 bits*/
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d124      	bne.n	80011e2 <spi_txe_interrupt_handle+0x98>
		{
			//16 bits data size
			uint16_t Data_swaped;
			Data_swaped = (*((__vo uint16_t*)pSPIHandle->pTxBuffer) << 8| (*((__vo uint16_t*)pSPIHandle->pTxBuffer + 1)));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	3302      	adds	r3, #2
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	81fb      	strh	r3, [r7, #14]


			*((__vo uint16_t*)&pSPIHandle->pSPIx->DR) = Data_swaped;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	330c      	adds	r3, #12
 80011bc:	89fa      	ldrh	r2, [r7, #14]
 80011be:	801a      	strh	r2, [r3, #0]
			pSPIHandle->TxLen--;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7d1b      	ldrb	r3, [r3, #20]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	751a      	strb	r2, [r3, #20]
			pSPIHandle->TxLen--;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7d1b      	ldrb	r3, [r3, #20]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	751a      	strb	r2, [r3, #20]
			pSPIHandle->pTxBuffer+=2; //se incrementa 2 el Tx buffer ya que estamos mandando 2 bytes
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	1c9a      	adds	r2, r3, #2
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60da      	str	r2, [r3, #12]
		}

		if(!pSPIHandle->TxLen)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7d1b      	ldrb	r3, [r3, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <spi_txe_interrupt_handle+0xae>
		{
			//Cerrar la comunicación
			SPI_CloseTransmission(pSPIHandle);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f87b 	bl	80012e6 <SPI_CloseTransmission>
			//llamar al callback
			SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 80011f0:	2101      	movs	r1, #1
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff f956 	bl	80004a4 <SPI_ApplicationEventCallback>
		}
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <spi_rxne_interrupt_handle>:

static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	if((pSPIHandle->pSPIx->CR2>>8 & 0xF) == SPI_DS_8_BITS)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	f003 030f 	and.w	r3, r3, #15
 8001214:	2b07      	cmp	r3, #7
 8001216:	d114      	bne.n	8001242 <spi_rxne_interrupt_handle+0x42>
	{
		//8bits Data size
		//1. Guardar datos en BUFFER
		*((uint8_t*)pSPIHandle->pRxBuffer) = *((__vo uint8_t*)&pSPIHandle->pSPIx->DR);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f103 020c 	add.w	r2, r3, #12
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7d5b      	ldrb	r3, [r3, #21]
 800122e:	3b01      	subs	r3, #1
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	755a      	strb	r2, [r3, #21]
		pSPIHandle->pRxBuffer++;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	e02a      	b.n	8001298 <spi_rxne_interrupt_handle+0x98>
	}else if((pSPIHandle->pSPIx->CR2>>8 & 0xF) == SPI_DS_16_BITS){
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	2b0f      	cmp	r3, #15
 8001250:	d122      	bne.n	8001298 <spi_rxne_interrupt_handle+0x98>
		//16bits

		uint16_t Data_swaped;
		//1. Guardar datos en BUFFER
		Data_swaped = *((__vo uint16_t*)&pSPIHandle->pSPIx->DR);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	330c      	adds	r3, #12
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	81fb      	strh	r3, [r7, #14]
		*((__vo uint16_t*)pSPIHandle->pTxBuffer) = (Data_swaped >> 8);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	89fa      	ldrh	r2, [r7, #14]
 8001262:	0a12      	lsrs	r2, r2, #8
 8001264:	b292      	uxth	r2, r2
 8001266:	801a      	strh	r2, [r3, #0]
		*((__vo uint16_t*)pSPIHandle->pTxBuffer + 1) = (Data_swaped & 0xFF);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	3302      	adds	r3, #2
 800126e:	89fa      	ldrh	r2, [r7, #14]
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	b292      	uxth	r2, r2
 8001274:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7d5b      	ldrb	r3, [r3, #21]
 800127a:	3b01      	subs	r3, #1
 800127c:	b2da      	uxtb	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	755a      	strb	r2, [r3, #21]
		pSPIHandle->RxLen--;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7d5b      	ldrb	r3, [r3, #21]
 8001286:	3b01      	subs	r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	755a      	strb	r2, [r3, #21]
		pSPIHandle->pRxBuffer+=2; //se incrementa 2 el Tx buffer ya que estamos mandando 2 bytes
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	1c9a      	adds	r2, r3, #2
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	611a      	str	r2, [r3, #16]
	}


	if(!pSPIHandle->RxLen)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7d5b      	ldrb	r3, [r3, #21]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d106      	bne.n	80012ae <spi_rxne_interrupt_handle+0xae>
	{
		//Cerrar la comunicación
		SPI_CloseReception(pSPIHandle);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f83b 	bl	800131c <SPI_CloseReception>
		//llamar al callback
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_RX_CMPLT);
 80012a6:	2102      	movs	r1, #2
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff f8fb 	bl	80004a4 <SPI_ApplicationEventCallback>

	}
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <spi_ovr_interrupt_handle>:

static void spi_ovr_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7d9b      	ldrb	r3, [r3, #22]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d007      	beq.n	80012d6 <spi_ovr_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;

	//llamar al callback
	SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 80012d6:	2103      	movs	r1, #3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff f8e3 	bl	80004a4 <SPI_ApplicationEventCallback>
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <SPI_CloseTransmission>:

void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	//deshabilitar interrupcion txeie
	pSPIHandle->pSPIx->CR2 &= ~(1 << TXEIE_BIT);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012fc:	605a      	str	r2, [r3, #4]
	//LIMPIAR A DONDE APUNTA MI VARIABLE Tx Buffer
	pSPIHandle->pTxBuffer = NULL;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
	//Limpiar la variable de len
	pSPIHandle->TxLen = 0;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	751a      	strb	r2, [r3, #20]
	//cambiar el estado del bus a ready
	pSPIHandle->TxState = SPI_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	759a      	strb	r2, [r3, #22]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << RXNEIE_BIT);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001332:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	755a      	strb	r2, [r3, #21]
	pSPIHandle->RxState = SPI_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	75da      	strb	r2, [r3, #23]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <memset>:
 8001352:	4402      	add	r2, r0
 8001354:	4603      	mov	r3, r0
 8001356:	4293      	cmp	r3, r2
 8001358:	d100      	bne.n	800135c <memset+0xa>
 800135a:	4770      	bx	lr
 800135c:	f803 1b01 	strb.w	r1, [r3], #1
 8001360:	e7f9      	b.n	8001356 <memset+0x4>
	...

08001364 <__libc_init_array>:
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	4d0d      	ldr	r5, [pc, #52]	; (800139c <__libc_init_array+0x38>)
 8001368:	4c0d      	ldr	r4, [pc, #52]	; (80013a0 <__libc_init_array+0x3c>)
 800136a:	1b64      	subs	r4, r4, r5
 800136c:	10a4      	asrs	r4, r4, #2
 800136e:	2600      	movs	r6, #0
 8001370:	42a6      	cmp	r6, r4
 8001372:	d109      	bne.n	8001388 <__libc_init_array+0x24>
 8001374:	4d0b      	ldr	r5, [pc, #44]	; (80013a4 <__libc_init_array+0x40>)
 8001376:	4c0c      	ldr	r4, [pc, #48]	; (80013a8 <__libc_init_array+0x44>)
 8001378:	f000 f818 	bl	80013ac <_init>
 800137c:	1b64      	subs	r4, r4, r5
 800137e:	10a4      	asrs	r4, r4, #2
 8001380:	2600      	movs	r6, #0
 8001382:	42a6      	cmp	r6, r4
 8001384:	d105      	bne.n	8001392 <__libc_init_array+0x2e>
 8001386:	bd70      	pop	{r4, r5, r6, pc}
 8001388:	f855 3b04 	ldr.w	r3, [r5], #4
 800138c:	4798      	blx	r3
 800138e:	3601      	adds	r6, #1
 8001390:	e7ee      	b.n	8001370 <__libc_init_array+0xc>
 8001392:	f855 3b04 	ldr.w	r3, [r5], #4
 8001396:	4798      	blx	r3
 8001398:	3601      	adds	r6, #1
 800139a:	e7f2      	b.n	8001382 <__libc_init_array+0x1e>
 800139c:	080013cc 	.word	0x080013cc
 80013a0:	080013cc 	.word	0x080013cc
 80013a4:	080013cc 	.word	0x080013cc
 80013a8:	080013d0 	.word	0x080013d0

080013ac <_init>:
 80013ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ae:	bf00      	nop
 80013b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b2:	bc08      	pop	{r3}
 80013b4:	469e      	mov	lr, r3
 80013b6:	4770      	bx	lr

080013b8 <_fini>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	bf00      	nop
 80013bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	469e      	mov	lr, r3
 80013c2:	4770      	bx	lr
